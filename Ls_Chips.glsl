// Chips: show colour chips with names
// lewis@lewissaunders.com
// TODO:
//  o extract kerning pair metrics from the Source Sans font and try to use them?

#version 120
uniform float adsk_result_w, adsk_result_h, adsk_result_frameratio;
uniform sampler2D front, adsk_texture_grid;
uniform vec2 chip1pos;
uniform vec3 chip1col;

vec2 res = vec2(adsk_result_w, adsk_result_h);
vec2 xy = gl_FragCoord.xy / res;

// Widths for each ASCII character, generated by /obj/font/charwidths in Ls_Chips.hip Houdini scene
const float charwidths[] = float[](0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.013000, 0.005811, 0.013125, 0.028232, 0.024609, 0.049561, 0.035957, 0.003486, 0.010869, 0.010869, 0.017432, 0.028096, 0.007998, 0.015039, 0.005811, 0.023447, 0.026113, 0.022832, 0.026934, 0.027207, 0.029531, 0.027686, 0.026250, 0.026865, 0.027139, 0.026182, 0.005811, 0.007998, 0.028096, 0.028096, 0.028096, 0.021533, 0.048603, 0.034863, 0.029805, 0.032266, 0.030898, 0.025361, 0.024541, 0.032676, 0.030420, 0.003145, 0.022285, 0.030830, 0.023926, 0.035000, 0.030215, 0.037119, 0.027686, 0.037256, 0.028574, 0.029668, 0.031855, 0.030352, 0.033018, 0.048672, 0.030625, 0.030146, 0.030078, 0.010938, 0.023516, 0.010938, 0.023721, 0.032539, 0.011484, 0.024199, 0.027344, 0.025362, 0.027344, 0.026865, 0.017431, 0.028985, 0.024268, 0.005469, 0.012920, 0.024609, 0.006221, 0.043477, 0.024268, 0.029463, 0.027344, 0.027344, 0.015654, 0.023105, 0.018662, 0.024063, 0.028027, 0.043545, 0.025908, 0.028164, 0.023994, 0.015244, 0.002461, 0.015244, 0.027207, 0.000000);

// Retrieves a colour from index i
vec3 getcol(int i) {
  vec2 uv;
  uv.y = float(i);
  uv.x = 0.0;
  uv += 0.5;
  uv /= 1024.0;
  vec3 texel = texture2D(adsk_texture_grid, uv).gba;
  return texel;
}

// Retrieves a character code from string s at index i
int getch(int s, int i) {
  vec2 uv;
  uv.y = float(s);
  uv.x = float(i + 1);
  uv += 0.5;
  uv /= 1024.0;
  float texel = texture2D(adsk_texture_grid, uv).g;
  return int(texel);
}

// Returns contribution of string s at position where
float print(int s, vec2 where) {
  float tracking = 0.011;
  vec2 stringuv = (xy - where) * 4.5;
  if(stringuv.x < 0.0 || stringuv.y > 0.1 || stringuv.y < 0.0) return 0.0;

  // Which character are we in?  Sum widths of characters in string left to right
  // until we overtake current position
  int thischaridx = -1;
  int thischar = -1;
  float prevcharswidth = 0.0;
  for(int i = 0; i < 40; i++) {
    thischar = getch(s, i);
    if(thischar == 0) break; // End of string, they're null terminated in the texture
    float thischarwidth = (charwidths[thischar] + tracking) / adsk_result_frameratio;
    prevcharswidth += thischarwidth;
    if(prevcharswidth > stringuv.x) {
      thischaridx = i;
      prevcharswidth -= thischarwidth;
      break;
    }
  }

  // Give up if we're off the end of the string
  if(thischaridx == -1) return 0.0;

  // Where are we in the character?
  vec2 charuv = stringuv - vec2(prevcharswidth, 0.0);
  charuv.x *= adsk_result_frameratio;

  // Where is that in the font texture?
  int nth = thischar - 32;
  int row = nth / 10;
  int col = nth - (row * 10);
  vec2 charorigin = vec2(col, row) / 10.0;
  charorigin.x += 0.021;
  vec2 fontuv = charorigin + charuv;

  // Look up the SDF and step to it for antialiasing
  float sdf = texture2D(adsk_texture_grid, fontuv).r;
  float aa = 1.0 - smoothstep(0.0, 4.0, sdf);

  return aa;
}

// Return the index of the RAL colour closest to col
int bestcol(vec3 col) {
  int best = -1;
  float lowest = 999.0;
  for(int i = 0; i < 213; i++) {
    float dist = length(col - getcol(i));
    if(dist < lowest) {
      lowest = dist;
      best = i;
    }
  }
  return best;
}

// Transform into UV coords in a chip rectangle
vec2 rectuv(vec2 origin, vec2 size) {
    return (xy - origin) / size;
}

// Return signed distance to a rounded rectable
float roundedrect(vec2 origin, vec2 size, float round) {
  vec2 uv = rectuv(origin, size);
  vec2 d = max(vec2(0.0, 0.0) - uv, uv - vec2(1.0, 1.0));
  return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));
}

void main() {
  vec3 frontpix = texture2D(front, xy).rgb;

  vec2 chipsize = vec2(0.1, 0.125 * adsk_result_frameratio);

  vec2 chip1origin = chip1pos - vec2(0.0, 0.18);
  vec3 chip1pickcol = texture2D(front, chip1pos).rgb;
  int chip1bestcol = bestcol(chip1pickcol);
  float chip1patchmatte = smoothstep(0.25, 0.252, rectuv(chip1origin, chipsize).y);
  vec3 chip1fill = mix(vec3(1.0), getcol(chip1bestcol), chip1patchmatte);
  float chip1name = print(chip1bestcol, chip1origin + vec2(0.003, 0.027));
  chip1fill -= chip1name;
  float chip1matte = 1.0 - smoothstep(0.03, 0.035, roundedrect(chip1origin, chipsize, 1.0));

  float chip1shadow = mix(1.0, pow(smoothstep(0.0, 0.3, roundedrect(chip1origin + vec2(0.001, -0.001), chipsize, 1.0)), 0.1), 0.5);

  frontpix *= chip1shadow;

  vec3 comped = mix(frontpix, chip1fill, chip1matte);
  gl_FragColor = vec4(comped, 1.0);
}
