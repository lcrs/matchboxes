#version 120
uniform float adsk_result_w, adsk_result_h;
uniform sampler2D front, adsk_texture_grid;
uniform vec2 t;

// Array of widths for each ASCII character, generated by Houdini
const float char_widths[] = float[](0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.020000, 0.005811, 0.013125, 0.028232, 0.024609, 0.049561, 0.035957, 0.003486, 0.010869, 0.010869, 0.017432, 0.028096, 0.007998, 0.015039, 0.005811, 0.023447, 0.026113, 0.022832, 0.026934, 0.027207, 0.029531, 0.027686, 0.026250, 0.026865, 0.027139, 0.026182, 0.005811, 0.007998, 0.028096, 0.028096, 0.028096, 0.021533, 0.048603, 0.034863, 0.029805, 0.032266, 0.030898, 0.025361, 0.024541, 0.032676, 0.030420, 0.003145, 0.022285, 0.030830, 0.023926, 0.035000, 0.030215, 0.037119, 0.027686, 0.037256, 0.028574, 0.029668, 0.031855, 0.030352, 0.033018, 0.048672, 0.030625, 0.030146, 0.030078, 0.010938, 0.023516, 0.010938, 0.023721, 0.032539, 0.011484, 0.024199, 0.027344, 0.025362, 0.027344, 0.026865, 0.017431, 0.028985, 0.024268, 0.005469, 0.012920, 0.024609, 0.006221, 0.043477, 0.024268, 0.029463, 0.027344, 0.027344, 0.015654, 0.023105, 0.018662, 0.024063, 0.028027, 0.043545, 0.025908, 0.028164, 0.023994, 0.015244, 0.002461, 0.015244, 0.027207, 0.000000);
// Returns lower left corner of character in the font texture
vec2 char_origin(int c) {
  int nth = c - 32;
  int row = nth / 10;
  int col = nth - (row * 10);
  return vec2(col, row) / 10.0;
}

float char_print(int[13] str, vec2 where, vec2 xy) {
  vec2 stringuv = clamp(xy - where, 0.0, 1.0);
  if(stringuv.y > 0.1) return 1.0;

  // Which character are we in?
  int thischaridx = -1;
  float prevcharswidth = 0.0;
  for(int i = 0; i < str.length(); i++) {
    prevcharswidth += char_widths[str[i]] + 0.01;
    if(prevcharswidth > stringuv.x) {
        thischaridx = i;
        prevcharswidth -= char_widths[str[i]] + 0.01;
        break;
    }
  }
  int thischar = str[thischaridx];

  // Give up if we're off the end of the string
  if(thischaridx == -1) return 1.0;

  // Where are we in the character?
  vec2 charuv = stringuv - vec2(prevcharswidth, 0.0);

  // Where is that in the font texture?
  vec2 fontuv = char_origin(thischar) + charuv + t;

  // Look it up
  float dist = texture2D(adsk_texture_grid, fontuv).r;
  float thresd = smoothstep(0.5, 1.5, dist);

  return thresd;
}

void main() {
  vec2 res = vec2(adsk_result_w, adsk_result_h);
  vec2 xy = gl_FragCoord.xy / res;

  int str[13] = int[](69, 108, 109, 32, 99, 111, 109, 112, 108, 97, 105, 110, 115); // Elm complains
  float letters = char_print(str, vec2(0.0, 0.2), xy);

  gl_FragColor = vec4(letters);
}
